datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum ContractorStatus {
  DRAFT
  APPROVED
  REJECTED
}

model User {
  id    String @id @default(cuid())
  email String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password Password?
  notes    Note[]
  roles    UserRole[]
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Note {
  id    String @id @default(cuid())
  title String
  body  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
}

model Contractor {
  id               String           @id @default(uuid())
  name             String
  email            String?
  phone            String?
  website          String?
  addressLine1     String
  addressLine2     String?
  city             String
  state            String
  zip              String
  googlePlacesId   String?
  googleRating     Float?
  googleNumRatings Int?
  googleReviewsUrl String?
  status           ContractorStatus @default(DRAFT)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  certifications   Certification[]
  services         Service[]
  statesServed     State[]
}

model Certification {
  id              Int        @id @default(autoincrement())
  name String
  shortName String
  description String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  contractors      Contractor[]
  
  @@unique(name)
}

model Service {
  id              Int        @id @default(autoincrement())
  name     String
  description String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  contractors      Contractor[]
  
  @@unique(name)
}

model State {
  id              Int        @id @default(autoincrement())
  name           String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  contractors      Contractor[]
  
  @@unique(name)
}

model Role {
  id          Int    @id @default(autoincrement())
  name        String @unique
  description String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users UserRole[]
}

model UserRole {
  id     Int    @id @default(autoincrement())
  userId String
  roleId Int

  assignedAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
}
